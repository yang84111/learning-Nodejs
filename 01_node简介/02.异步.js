/* 
    进程和线程
        -进程（厂房）
            -程序的运行环境
        -线程（工人）
            -线程是实际进行运算的东西

    同步
        -通常情况下代码是自上向下一行一行执行的
        -前边代码不执行后边的也不执行
        -同步代码执行会出现阻塞的情况，一行代码执行慢会影响整个程序的执行
    解决同步的问题：
        -java python
            -通过多线程解决
        -node.js
            -通过异步方式来解决
    
    异步
        -一段代码的执行不会影响到其他的程序
        -异步的问题
            异步的代码无法通过return设置返回值
        -异步的特点
            1.不会阻塞其他代码的执行
            2.需要通过回调函数来返回结果
        -基于回调函数带来的问题
            1.代码的可读性差
            2.可调试性差
        -如何解决问题
            -用一个东西代替回调函数来返回结果
            -Promise
                -Promise是一个可以用来存储数据的对象
                -Promise存储数据的方式特殊，
                    这种特殊方式可以用来存储异步调用的数据
*/


function sum(a, b, cb) {
    setTimeout(() => {
        cb(a + b)
    }, 1000)
}

console.log("111111");

// sum(123, 456, (result) => {
//     console.log(result);
// })

// 多次使用回调函数

sum(123, 456, (result) => {
    sum(result, 7, (result) => {
        sum(result, 8, (result) => {
            console.log(result);
        })
    })
})

console.log("222222");