HTTP协议
    -网络基础
    -网络的服务是基于请求和响应的    
        https://  协议名
        xxxx.com  域名 domain  
            每一个服务器都有一个他自己的唯一标识，称为IP地址
            域名就相当于是IP地址的别名，方便记忆
        /hello/index.html  网站资源路径

    1.当在浏览器中输入了一个地址后发生了什么
        https://xxx.com/hello/index.html
        ①DNS解析，获取网站的IP地址
        ②浏览器需要和服务器建立连接（tcp/ip）
        ③向服务器发送请求（http协议）
        ④服务器处理请求，返回响应（http协议）
        ⑤浏览器将响应的页面渲染
        ⑥断开和服务器的连接

    2.客户端如何和服务器建立（断开）连接
        -通过三次握手和四次挥手
            -三次握手是客户端与服务器建立连接的过程
                1.客户端向服务器发送连接请求
                                SYN
                2.服务器收到连接请求，向客户端返回信息
                                SYN  ACK
                3.客户端向服务器发送同意连接的信息
                                ACK
            -四次挥手(断开连接)
                1.客户端-->服务器
                        FIN
                2.服务器-->客户端
                        ACK
                3.服务器-->客户端
                      FIN ACK
                4.客户端-->服务器
                        ACK

    请求和响应实际上只是一段数据，只是这段数据需要遵循一个特殊的格式
        这个特殊的格式由http协议规定

TCP/IP 协议族
    -TCP/IP协议族中包含了一组协议
        这组协议规定了互联网中所有的通信的细节
    -网络通信的过程有四层组成
        应用层
            -软件的层面，浏览器 服务器都属于应用层
        传输层
            -负责对数据进行拆分，把大数据拆分为一个一个小包
        网络层
            -负责给数据包添加信息
        数据链路层
            -传送信息
    
    -HTTP协议（超文本传输协议）是应用层的协议，
        用来规定客户端和服务器间通信的报文格式的
    -报文：
        浏览器和服务器之间通信是基于请求和响应的
        -浏览器向服务器发送请求（request）
        -服务器向浏览器返回响应（response）

    -服务器
        1.可以接受到浏览器发送的请求报文
        2.可以向浏览器返回响应报文

        -请求报文（request）
            -客户端发送给服务器的报文称为请求报文
            -格式：
                请求首行
                请求头
                空行
                请求体

            请求首行   
                请求报文的第一行GET index.html?username=sunwukong HTTP/1.1
                    第一部分   GET
                        get表示请求方式，get表示发送的是get请求
                        现在常用的方式就是get和post请求
                        get请求用来向服务器请求资源
                        post请求主要用来向服务器发送数据
                    第二部分   /index.html?username=sunwukong
                        表示请求资源的路径
                            ?后边的内容叫做查询字符串
                            查询字符串是一个名值对结构，一个名字对应一个值
                                使用=连接，多个名值对之间使用&分割
                                username=sunwukong&password=123456
                            get请求通过查询字符串将数据发送给服务器
                               - 由于查询字符串会在浏览器地址栏直接显示
                                1.所以安全性较差，
                                2.同时由于url地址长度有限制，所以get请求无法发送较大的数据
                            post请求通过请求体来发送数据
                                -在chrome中通过载荷来查看
                                -post请求无法在地址栏直接查看
                                    1.所以安全性较好
                                    2.请求体大小没有限制，可以发送任意大小的数据
                    第三部分     HTTP/1.1 协议的版本
            请求头
                -请求头也是名值对结构，用来告诉服务器我们浏览器的信息
                -每一个请求头都有它的作用：
                    Accept 浏览器可以接受的文件类型
                    Accept-Encoding  浏览器允许的压缩的编码
                    User-Agent   用户代理，它是一段用来描述浏览器信息的字符串
            空行 
                -用来分隔请求头和请求体的
            请求体
                -post请求通过请求体来发送数据  

        -响应报文：
            响应首行
            响应头
            空行
            响应体

                响应首行
                    HTTP/1.1 200 OK
                        200  响应状态码
                        OK  对响应状态码的描述
                        -响应状态码的规则
                            1xx  请求处理中
                            2xx  表示成功
                            3xx  表示请求的重定向
                            4xx  表示客户端错误
                            5xx  表示服务器的错误
                响应头
                    -也是一个一个的名值对结构，用来告诉浏览器响应的信息
                    -Content-Type  用来描述响应体的类型
                    -Content-Length  响应体的长度
                    Content-Type: text/html; charset=UTF-8
                    Content-Length: 1953
                空行
                    -用来分隔响应头和响应体
                响应体
                    -响应体就是服务器返回给客户端的内容

        响应报文：
            HTTP/1.1 200 OK
            Vary: Origin
            Access-Control-Allow-Credentials: true
            Accept-Ranges: bytes
            Cache-Control: public, max-age=0
            Last-Modified: Sat, 27 May 2023 09:50:29 GMT
            Date: Sat, 27 May 2023 10:05:39 GMT
            ETag: W/"1cc-1885c9ddd19"
            Content-Type: text/html; charset=UTF-8
            Content-Length: 1953

